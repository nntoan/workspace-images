# vi: ft=dockerfile
{{ edit_comment_nginx }}

FROM nginx:{{ nginx_version }}-alpine
MAINTAINER "Toan Nguyen" <hello@nntoan.com>

###
### Labels
###
# https://github.com/opencontainers/image-spec/blob/master/annotations.md
#LABEL "org.opencontainers.image.created"=""
#LABEL "org.opencontainers.image.version"=""
#LABEL "org.opencontainers.image.revision"=""
LABEL "maintainer"="Toan Nguyen <hello@nntoan.com>"
LABEL "org.opencontainers.image.authors"="Toan Nguyen <hello@nntoan.com>"
LABEL "org.opencontainers.image.url"="https://github.com/nntoan/workspace-images"
LABEL "org.opencontainers.image.documentation"="https://github.com/nntoan/workspace-images"
LABEL "org.opencontainers.image.source"="https://github.com/nntoan/workspace-images"
LABEL "org.opencontainers.image.vendor"="Docker Workspace"
LABEL "org.opencontainers.image.licenses"="MIT"
LABEL "org.opencontainers.image.ref.name"="{{ nginx_version }}-alpine"
LABEL "org.opencontainers.image.title"="Nginx HTTPD {{ nginx_version }}"
LABEL "org.opencontainers.image.description"="Nginx HTTPD {{ nginx_version }}"


###
### Build arguments
###
ARG VHOST_GEN_GIT_REF=1.0.10
ARG WATCHERD_GIT_REF=v1.1.0
ARG CERT_GEN_GIT_REF=0.10

ENV BUILD_DEPS \
	make \
	wget

ENV RUN_DEPS \
	ca-certificates \
	bash \
	openssl \
	py3-yaml \
	shadow \
	supervisor


###
### Install required packages
###
RUN set -eux \
	&& apk add --no-cache \
		${BUILD_DEPS} \
		${RUN_DEPS} \
	\
	# Install vhost-gen
	&& wget --no-check-certificate -O vhost-gen.tar.gz "https://github.com/devilbox/vhost-gen/archive/${VHOST_GEN_GIT_REF}.tar.gz" \
	&& tar xvfz vhost-gen.tar.gz \
	&& cd "vhost-gen-${VHOST_GEN_GIT_REF}" \
	&& make install \
	&& cd .. \
	&& rm -rf vhost*gen* \
	\
	# Install cert-gen
	&& wget --no-check-certificate -O /usr/bin/ca-gen https://raw.githubusercontent.com/devilbox/cert-gen/${CERT_GEN_GIT_REF}/bin/ca-gen \
	&& wget --no-check-certificate -O /usr/bin/cert-gen https://raw.githubusercontent.com/devilbox/cert-gen/${CERT_GEN_GIT_REF}/bin/cert-gen \
	&& chmod +x /usr/bin/ca-gen \
	&& chmod +x /usr/bin/cert-gen \
	\
	# Install watcherd
	&& wget --no-check-certificate -O /usr/bin/watcherd https://raw.githubusercontent.com/devilbox/watcherd/${WATCHERD_GIT_REF}/bin/watcherd \
	&& chmod +x /usr/bin/watcherd \
	\
	# Clean-up
	&& apk del \
		${BUILD_DEPS}


###
### Runtime arguments
###
ENV MY_USER=nginx
ENV MY_GROUP=nginx
ENV HTTPD_START="/usr/sbin/nginx"
ENV HTTPD_RELOAD="nginx -s reload"
ENV HTTPD_VERSION="nginx -V 2>&1 | head -1 | awk '{print \$3}'"
ENV VHOSTGEN_HTTPD_SERVER="nginx"

ENV TLD_SUFFIX {{ tld_suffix }}
ENV UPLOAD_MAX_FILESIZE 64M
ENV XDEBUG_HOST fpm_xdebug
ENV FPM_HOST fpm
ENV FPM_PORT 9000
ENV UPSTREAM_HOST web
ENV UPSTREAM_PORT 8080
ENV MAGENTO_ROOT /app
ENV MAGENTO_RUN_MODE production
ENV MFTF_UTILS 0
ENV DEBUG false
ENV NGINX_WORKER_PROCESSES 1
ENV NGINX_WORKER_CONNECTIONS 1024


###
### Create directories
###
# /docker-entrypoint.d/10-ipv6* was added by nginx to do some IPv6 magic (which breaks the image)
RUN set -eux \
	&& rm -rf /docker-entrypoint.d || true \
	&& mkdir -p /etc/nginx-custom.d \
	&& mkdir -p /etc/nginx/extra.d \
	&& mkdir -p /etc/nginx/conf.d \
	&& mkdir -p /etc/nginx/vhost.d \
	&& mkdir -p /etc/httpd-custom.d \
    && mkdir -p /etc/httpd/conf.d \
    && mkdir -p /etc/httpd/vhost.d \
	&& mkdir -p /var/www/default/htdocs \
	&& mkdir -p /var/log/httpd \
	&& mkdir -p /shared/httpd \
	&& chmod 0775 /shared/httpd \
	&& chown ${MY_USER}:${MY_GROUP} /shared/httpd


###
### Symlink Python3 to Python
###
RUN set -eux \
	&& ln -sf /usr/bin/python3 /usr/bin/python


###
### Set timezone
###
RUN set -eux \
	&& if [ -f /etc/localtime ]; then rm /etc/localtime; fi \
	&& ln -s /usr/share/zoneinfo/UTC /etc/localtime

RUN mkdir /etc/nginx/ssl

RUN openssl req -x509 -newkey rsa:2048 -sha256 -days 730 -nodes \
  -keyout /etc/nginx/ssl/magento.key -out /etc/nginx/ssl/magento.crt \
  -subj "/C=US/ST=TX/L=Austin/O=Adobe Commerce/OU=Cloud Docker/CN=*.${TLD_SUFFIX}" \
  -addext "subjectAltName=DNS:*.${TLD_SUFFIX},DNS:*.${TLD_SUFFIX}"


###
### Copy files
###
COPY ./data/etc/nginx.conf /etc/nginx/nginx.conf
COPY ./data/etc/vhost.conf /etc/nginx/conf.d/default.conf
COPY ./data/etc/xdebug-upstream.conf /etc/nginx/conf.d/xdebug/upstream.conf

COPY ./data/vhost-gen/templates-main /etc/vhost-gen/templates-main
COPY ./data/create-vhost.sh /usr/local/bin/create-vhost.sh

COPY ./data/docker-entrypoint.d /docker-entrypoint.d
COPY ./data/docker-entrypoint.sh /docker-entrypoint.sh


###
### Volumes
###
VOLUME /shared/httpd
VOLUME /ca


###
### Ports
###
EXPOSE 443


###
### Where to start inside the container
###
WORKDIR /shared/httpd


###
### Signals
###
STOPSIGNAL SIGTERM


###
### Entrypoint
###
RUN ["chmod", "+x", "/docker-entrypoint.sh"]
CMD ["nginx", "-g", "daemon off;"]
ENTRYPOINT ["/docker-entrypoint.sh"]