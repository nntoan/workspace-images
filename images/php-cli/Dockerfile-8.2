# vi: ft=dockerfile
# Auto-generated via Ansible: edit ./ansible/DOCKERFILES/php/cli/Dockerfile.j2 instead.

FROM golang:1.15 AS builder

RUN if [ $(uname -m) = "x86_64" ]; then mailhog_arch="amd64"; else mailhog_arch="arm64"; fi \
    && wget -O mhsendmail.tar.gz https://github.com/mailhog/mhsendmail/archive/refs/tags/v0.2.0.tar.gz \
    && tar -xf mhsendmail.tar.gz \
    && mkdir -p ./src/github.com/mailhog/ \
    && mv ./mhsendmail-0.2.0 ./src/github.com/mailhog/mhsendmail \
    && cd ./src/github.com/mailhog/mhsendmail/ \
    && go get . \
    && GOOS=linux GOARCH=${mailhog_arch} go build -o mhsendmail .


FROM php:8.2-cli
MAINTAINER "Toan Nguyen" <hello@nntoan.com>

###
### Labels
###
# https://github.com/opencontainers/image-spec/blob/master/annotations.md
#LABEL "org.opencontainers.image.created"=""
#LABEL "org.opencontainers.image.version"=""
#LABEL "org.opencontainers.image.revision"=""
LABEL "maintainer"="Toan Nguyen <hello@nntoan.com>"
LABEL "org.opencontainers.image.authors"="Toan Nguyen <hello@nntoan.com>"
LABEL "org.opencontainers.image.url"="https://github.com/nntoan/workspace-images"
LABEL "org.opencontainers.image.documentation"="https://github.com/nntoan/workspace-images"
LABEL "org.opencontainers.image.source"="https://github.com/nntoan/workspace-images"
LABEL "org.opencontainers.image.vendor"="Docker Workspace"
LABEL "org.opencontainers.image.licenses"="MIT"
LABEL "org.opencontainers.image.ref.name"="8.2-cli"
LABEL "org.opencontainers.image.title"="PHP-CLI 8.2"
LABEL "org.opencontainers.image.description"="PHP-CLI 8.2"


###
### Arguments
###
ARG COMPOSER_VERSION=2.2.23
ARG DOCROOT=/shared/httpd
ARG MAGENTO_ROOT=/app
ARG COMPOSER_ALLOW_SUPERUSER=1
ARG COMPOSER_HOME=/composer
ARG CRONTAB=""


###
### Envs
###
ENV MY_USER="www" \
    MY_GROUP="www" \
    MY_UID="1000" \
    MY_GID="1000" \
    PHP_VERSION="8.2" \
    COMPOSER_MEMORY_LIMIT=-1 \
    COMPOSER_ALLOW_SUPERUSER="${COMPOSER_ALLOW_SUPERUSER}" \
    COMPOSER_HOME="${COMPOSER_HOME}" \
    COMPOSER_CLEAR_CACHE=false \
    PHP_MEMORY_LIMIT=-1 \
    PHP_VALIDATE_TIMESTAMPS=1 \
    DEBUG=false \
    MAGENTO_RUN_MODE="production" \
    SENDMAIL_PATH=/dev/null \
    PHPRC="${DOCROOT}/APPNAME/php.ini"
ENV PHP_EXTENSIONS bcmath bz2 calendar exif gd gettext intl mysqli mcrypt pcntl pdo_mysql soap sockets sysvmsg sysvsem sysvshm redis opcache xsl zip sodium

###
### User/Group
###
RUN set -eux \
    && groupadd -g ${MY_GID} -r ${MY_GROUP} \
    && useradd -g ${MY_GROUP} -u ${MY_UID} -d ${DOCROOT} -m -s /bin/bash ${MY_USER}


###
### Install
###
RUN set -eux \
    && DEBIAN_FRONTEND=noninteractive apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get upgrade -y \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends --no-install-suggests \
    apt-utils \
    cron \
    git \
    mariadb-client \
    nano \
    nodejs \
    python3 \
    python3-pip \
    redis-tools \
    sendmail-bin \
    sendmail \
    sudo \
    unzip \
    vim \
    openssh-client \
    ca-certificates \
    gnupg2 \
    libbz2-dev \
    libfreetype6-dev \
    libgmp-dev \
    libgpgme11-dev \
    libicu-dev \
    libjpeg62-turbo-dev \
    libldap2-dev \
    libpcre3-dev \
    libpng-dev \
    libpspell-dev \
    libtidy-dev \
    libxslt1-dev \
    libyaml-dev \
    libzip-dev \
    lsb-release \
    software-properties-common \
    zip \
    python3-yaml \
    && rm -rf /var/lib/apt/lists/*
###
### PHP-CLI required helper tools from group_vars (php-helper-tools.yml)
###

# -------------------- composer --------------------
RUN set -eux \
	&& COMPOSER_1_VERSION="latest-1.x" \
	&& COMPOSER_2_VERSION="2.2.23" \
	\
	&& curl -sS -L --fail "https://getcomposer.org/download/${COMPOSER_1_VERSION}/composer.phar" > /usr/local/bin/composer-1 \
	&& curl -sS -L --fail "https://getcomposer.org/download/${COMPOSER_2_VERSION}/composer.phar" > /usr/local/bin/composer-2 \
	&& chmod +x /usr/local/bin/composer-1 \
	&& chmod +x /usr/local/bin/composer-2 \
	\
	&& ln -sf /usr/local/bin/composer-2 /usr/local/bin/composer \
	\
	&& true

# -------------------- nvm --------------------
RUN set -eux \
	&& NODE_VERSION="--lts" \
	\
	&& NVM_VERSION="$( \
	  curl -sS 'https://github.com/nvm-sh/nvm/releases' \
	  | grep -Eo '/nvm-sh/nvm/releases/tag/v?[.0-9]+"' \
	  | grep -Eo 'v?[.0-9]+' \
	  | sort -V \
	  | tail -1 \
	)" \
	&& mkdir -p /opt/nvm \
	&& curl -o- "https://raw.githubusercontent.com/nvm-sh/nvm/${NVM_VERSION}/install.sh" \
	  | NVM_DIR="/opt/nvm" bash \
	\
	&& chown -R www:www "/opt/nvm" \
	\
	&& su  -c ". /opt/nvm/nvm.sh; nvm install ${NODE_VERSION}" www \
	&& su  -c ". /opt/nvm/nvm.sh; nvm use ${NODE_VERSION}" www \
	&& su  -c ". /opt/nvm/nvm.sh; corepack enable" www \
	\
	&& ln -s "/opt/nvm/versions/node/$(su -c '. /opt/nvm/nvm.sh; node --version' www)/bin/corepack" /usr/local/bin/ \
	&& ln -s "/opt/nvm/versions/node/$(su -c '. /opt/nvm/nvm.sh; node --version' www)/bin/node" /usr/local/bin/ \
	&& ln -s "/opt/nvm/versions/node/$(su -c '. /opt/nvm/nvm.sh; node --version' www)/bin/npm" /usr/local/bin/ \
	&& ln -s "/opt/nvm/versions/node/$(su -c '. /opt/nvm/nvm.sh; node --version' www)/bin/npx" /usr/local/bin/ \
	&& ln -s "/opt/nvm/versions/node/$(su -c '. /opt/nvm/nvm.sh; node --version' www)/bin/yarn" /usr/local/bin/ \
	\
	&& chmod 0777 /opt/nvm \
	&& find /opt/nvm -type f -print0 | xargs -n1 -0 chmod go+w \
	&& find /opt/nvm -type d -print0 | xargs -n1 -0 chmod 0777 \
	\
	&& rm -rf /opt/nvm/.cache \
	&& rm -rf /opt/nvm/versions/node/$(su -c '. /opt/nvm/nvm.sh; node --version' www)/share \
	&& rm -rf /opt/nvm/versions/node/$(su -c '. /opt/nvm/nvm.sh; node --version' www)/include \
	\
	&& true


###
### Install defined php-cli-builds
###

# -------------------- (npm) grunt-cli --------------------
RUN set -eux \
	&& su -c '. /opt/nvm/nvm.sh; npm install --location=global grunt-cli' www \
	&& ln -s /opt/nvm/versions/node/$(su -c '. /opt/nvm/nvm.sh; node --version' www)/bin/grunt /usr/local/bin/ \
	&& grunt --version | grep -E '[0-9][.0-9]+' || (grunt --version; false)	\
	&& true

# -------------------- (npm) gulp --------------------
RUN set -eux \
	&& su -c '. /opt/nvm/nvm.sh; npm install --location=global gulp' www \
	&& ln -s /opt/nvm/versions/node/$(su -c '. /opt/nvm/nvm.sh; node --version' www)/bin/gulp /usr/local/bin/ \
	&& gulp --version | grep -E '[0-9][.0-9]+' || (gulp --version; false)	\
	&& true


# Install MailHog
COPY --from=builder /go/src/github.com/mailhog/mhsendmail/mhsendmail /usr/local/bin/
RUN sudo chmod +x /usr/local/bin/mhsendmail


###
### Install and enable PHP modules
###
# -------------------- Installing PHP Extension: bcmath --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         Built-in extension
	&& docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) bcmath \
	&& true


# -------------------- Installing PHP Extension: blackfire --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         Custom extension
	&& ARCH="$(dpkg-architecture --query DEB_HOST_GNU_CPU)" \
&& version=$(php -r "echo PHP_MAJOR_VERSION.PHP_MINOR_VERSION;") \
&& curl -A "Docker" -o /tmp/blackfire-probe.tar.gz -D - -L -s https://blackfire.io/api/v1/releases/probe/php/linux/${ARCH}/$version \
&& mkdir -p /tmp/blackfire \
&& tar zxpf /tmp/blackfire-probe.tar.gz -C /tmp/blackfire \
&& mv /tmp/blackfire/blackfire-*.so $(php -r "echo ini_get('extension_dir');")/blackfire.so \
&& rm -rf /tmp/blackfire /tmp/blackfire-probe.tar.gz \
 \
	&& true


# -------------------- Installing PHP Extension: bz2 --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         Built-in extension
	&& docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) bz2 \
	&& true


# -------------------- Installing PHP Extension: calendar --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         Built-in extension
	&& docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) calendar \
	&& true


# -------------------- Installing PHP Extension: exif --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         Built-in extension
	&& docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) exif \
	&& true


# -------------------- Installing PHP Extension: gd --------------------
RUN set -eux \
	# Installation: Version specific
	# Type:         Built-in extension
	# Custom:       configure command
	&& docker-php-ext-configure gd --with-freetype=/usr/include/ --with-jpeg=/usr/include/ \
	# Installation
	&& docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) gd \
	&& true


# -------------------- Installing PHP Extension: gettext --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         Built-in extension
	&& docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) gettext \
	&& true


# -------------------- Installing PHP Extension: gmp --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         Built-in extension
	&& docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) gmp \
	&& true


# -------------------- Installing PHP Extension: gnupg --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         PECL extension
	# Default:      Pecl command
	&& pecl install gnupg \
	&& true


# -------------------- Installing PHP Extension: intl --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         Built-in extension
	&& docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) intl \
	&& true


# -------------------- Installing PHP Extension: ldap --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         Custom extension
	&& if [ $(uname -m) = "x86_64" ]; then ldap_arch="x86_64-linux-gnu"; else ldap_arch="aarch64-linux-gnu"; fi \
&& docker-php-ext-configure ldap --with-libdir=lib/${ldap_arch} \
 \
	&& true


# -------------------- Installing PHP Extension: mailparse --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         PECL extension
	# Default:      Pecl command
	&& pecl install mailparse \
	&& true


# -------------------- Installing PHP Extension: msgpack --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         PECL extension
	# Default:      Pecl command
	&& pecl install msgpack \
	&& true


# -------------------- Installing PHP Extension: mysqli --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         Built-in extension
	&& docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) mysqli \
	&& true


# -------------------- Installing PHP Extension: oauth --------------------
RUN set -eux \
	# Installation: Version specific
	# Type:         PECL extension
	# Default:      Pecl command
	&& pecl install oauth \
	&& true


# -------------------- Installing PHP Extension: opcache --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         Built-in extension
	# Custom:       configure command
	&& docker-php-ext-configure opcache --enable-opcache \
	&& docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) opcache \
	&& true


# -------------------- Installing PHP Extension: pcntl --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         Built-in extension
	&& docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) pcntl \
	&& true


# -------------------- Installing PHP Extension: pcov --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         PECL extension
	# Default:      Pecl command
	&& pecl install pcov \
	&& true


# -------------------- Installing PHP Extension: pdo_mysql --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         Built-in extension
	&& docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) pdo_mysql \
	&& true


# -------------------- Installing PHP Extension: pspell --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         Built-in extension
	&& docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) pspell \
	&& true


# -------------------- Installing PHP Extension: raphf --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         PECL extension
	# Default:      Pecl command
	&& pecl install raphf \
	&& true


# -------------------- Installing PHP Extension: redis --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         PECL extension
	# Default:      Pecl command
	&& pecl install redis \
	&& true


# -------------------- Installing PHP Extension: shmop --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         Built-in extension
	&& docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) shmop \
	&& true


# -------------------- Installing PHP Extension: soap --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         Built-in extension
	&& docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) soap \
	&& true


# -------------------- Installing PHP Extension: sockets --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         Built-in extension
	&& docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) sockets \
	&& true


# -------------------- Installing PHP Extension: zookeeper --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         Custom extension
	&& mkdir -p /tmp/zoo \
&& cd /tmp/zoo \
&& git clone https://github.com/php-zookeeper/php-zookeeper.git \
&& curl -LO https://archive.apache.org/dist/zookeeper/zookeeper-3.4.14/zookeeper-3.4.14.tar.gz \
&& tar -xf zookeeper-3.4.14.tar.gz \
&& cp zookeeper-3.4.14/zookeeper-client/zookeeper-client-c/generated/zookeeper.jute.h zookeeper-3.4.14/zookeeper-client/zookeeper-client-c/include \
&& cd zookeeper-3.4.14/zookeeper-client/zookeeper-client-c \
&& ./configure \
&& sed -i 's/CFLAGS = -g -O2 -D_GNU_SOURCE/CFLAGS = -g -O2 -D_GNU_SOURCE -Wno-error=format-overflow -Wno-error=stringop-truncation/g' Makefile \
&& make \
&& make install \
&& ldconfig \
&& cd /tmp/zoo/php-zookeeper \
&& phpize \
&& ./configure --with-libzookeeper-dir=../zookeeper-3.4.14/zookeeper-client/zookeeper-client-c \
&& make \
&& make install \
 \
	&& true


# -------------------- Installing PHP Extension: sodium --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         Custom extension
	&& rm -f /usr/local/etc/php/conf.d/*sodium.ini \
&& rm -f /usr/local/lib/php/extensions/*/*sodium.so \
&& apt-get remove libsodium* -y \
&& mkdir -p /tmp/libsodium \
&& curl -sL https://github.com/jedisct1/libsodium/archive/1.0.18-RELEASE.tar.gz | tar xzf - -C  /tmp/libsodium \
&& cd /tmp/libsodium/libsodium-1.0.18-RELEASE/ \
&& ./configure \
&& make && make check \
&& make install \
&& cd / \
&& rm -rf /tmp/libsodium \
&& pecl install -o -f libsodium \
 \
	&& true


# -------------------- Installing PHP Extension: sysvmsg --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         Built-in extension
	&& docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) sysvmsg \
	&& true


# -------------------- Installing PHP Extension: sysvsem --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         Built-in extension
	&& docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) sysvsem \
	&& true


# -------------------- Installing PHP Extension: sysvshm --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         Built-in extension
	&& docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) sysvshm \
	&& true


# -------------------- Installing PHP Extension: tidy --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         Built-in extension
	&& docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) tidy \
	&& true


# -------------------- Installing PHP Extension: xdebug --------------------
RUN set -eux \
	# Installation: Version specific
	# Type:         PECL extension
	# Default:      Pecl command
	&& pecl install xdebug-3.2.0 \
	&& true


# -------------------- Installing PHP Extension: xmlrpc --------------------
RUN set -eux \
	# Installation: Version specific
	# Type:         PECL extension
	# Default:      Pecl command
	&& pecl install xmlrpc-1.0.0RC3 \
	&& true


# -------------------- Installing PHP Extension: xsl --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         Built-in extension
	&& docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) xsl \
	&& true


# -------------------- Installing PHP Extension: yaml --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         PECL extension
	# Default:      Pecl command
	&& pecl install yaml \
	&& true


# -------------------- Installing PHP Extension: zip --------------------
RUN set -eux \
	# Installation: Generic
	# Type:         Built-in extension
	&& docker-php-ext-install -j$(getconf _NPROCESSORS_ONLN) zip \
	&& true



# Shrink everything down
RUN set -eux \
    && (find /usr/local/bin  -type f -print0 | xargs -n1 -0 -P$(getconf _NPROCESSORS_ONLN) strip --strip-all -p 2>/dev/null || true) \
    && (find /usr/local/lib  -type f -print0 | xargs -n1 -0 -P$(getconf _NPROCESSORS_ONLN) strip --strip-all -p 2>/dev/null || true) \
    && (find /usr/local/sbin -type f -print0 | xargs -n1 -0 -P$(getconf _NPROCESSORS_ONLN) strip --strip-all -p 2>/dev/null || true)


###
### Configure Bash (composer, node yarn)
###
RUN set -eux \
    && { \
        #echo 'PATH="${PATH}:/usr/local/bin:/usr/local/sbin"'; \
        echo; \
        echo "# [Workspace] Ensure yarn, composer and node are in PATH"; \
        echo 'PATH="${HOME}/.yarn/bin:${PATH}"'; \
        echo 'PATH="${HOME}/.composer/vendor/bin:${PATH}"'; \
        echo 'PATH="/opt/nvm/versions/node/$(node --version)/bin:${PATH}"'; \
        echo "export PATH"; \
        echo; \
        echo "# [Workspace] Ensure to load nvm"; \
        echo 'export NVM_DIR="/opt/nvm"'; \
        echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm'; \
        echo '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion'; \
    } | tee -a ${DOCROOT}/.bashrc /root/.bashrc \
    && chown ${MY_USER}:${MY_GROUP} ${DOCROOT}/.bashrc


###
### Copy artifacts from builder
###
COPY ./data/php-ini.d/php-cli-8.2.ini /usr/local/etc/php/conf.d/zz-magento.ini
COPY ./data/php-ini.d/php-xdebug.ini /usr/local/etc/php/conf.d/zz-xdebug-settings.ini
COPY ./data/php-ini.d/php-pcov.ini /usr/local/etc/php/conf.d/zz-pcov-settings.ini
COPY ./data/php-ini.d/mail.ini /usr/local/etc/php/conf.d/zz-mail.ini
COPY ./data/php-ini.d/php-gnupg.ini /usr/local/etc/php/conf.d/zz-gnupg.ini
COPY ./data/bin/* /usr/local/bin/
COPY ./data/docker-entrypoint.sh /docker-entrypoint.sh
COPY ./data/docker-entrypoint.d /docker-entrypoint.d


###
### Volumes
###
RUN set -eux \
    mkdir -p ${DOCROOT}
VOLUME ${DOCROOT}
VOLUME /shared/backups


###
### Permissions & miscellaneous
###
RUN set -eux \
    chown -R www:www /usr/local /var/www /var/log /usr/local/etc/php/conf.d /etc/cron.d ${DOCROOT} ${COMPOSER_HOME}
RUN set -eux \
    if [ ! -z "${CRONTAB}" ]; then echo "${CRONTAB}" > /etc/cron.d/magento && touch /var/log/cron.log ; fi
RUN ["chmod", "+x", \
    "/docker-entrypoint.sh", \
    "/usr/local/bin/magento-installer", \
    "/usr/local/bin/magento-command", \
    "/usr/local/bin/mftf-command", \
    "/usr/local/bin/ece-command", \
    "/usr/local/bin/cloud-build", \
    "/usr/local/bin/cloud-deploy", \
    "/usr/local/bin/cloud-post-deploy", \
    "/usr/local/bin/run-cron", \
    "/usr/local/bin/run-hooks" \
]


###
### Where to start inside the container
###
WORKDIR ${DOCROOT}


###
### Entrypoint
###
CMD ["bash"]
ENTRYPOINT ["/docker-entrypoint.sh"]
